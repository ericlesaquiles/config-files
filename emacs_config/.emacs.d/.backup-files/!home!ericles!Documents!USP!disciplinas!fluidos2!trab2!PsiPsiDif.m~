
h = 4;
l = 6;

eixo_x = 120;				# linhas
eixo_y = 80;				# colunas

posy    = @(j) j * (h)/eixo_y; # index começa de 1, não de 0
sqrDifY = @(j1, j2) posy(j1)**2 - posy(j2)**2;

dy = @(i) h/eixo_y;
dx = @(i) l/eixo_x;
dyhat = @(i) h/eixo_y;
dxhat = @(i) l/eixo_x;

Dcx = @(jj, ii, delta, M) (-M(ii, jj + 1) + M(ii, jj - 1))/(2*delta);
Dcy = @(jj, ii, delta, M) (-M(ii + 1, jj) + M(ii - 1, jj))/(2*delta);


fluxo = @(i,j) (((i == 1) && (j < eixo_y/h)) || ((i == eixo_x) && (j >  3*(eixo_y/h)))) * 5;

A = sparse(zeros(eixo_x*eixo_y,eixo_x*eixo_y));

for j=1:eixo_y
  for i=1:eixo_x

    ## Na malha, k representa o "elemento atual",
    ## kp o próxio em x
    ## kpp o próximo em y
    ## km o anterior em x
    ## kmm o anterior em y

    ##      .  .   kpp  .   .   .   .
    ##      . km   k   kp   .   .   .   ...
    ##      .  .   kmm  .   .   .   .   
    
    k   = i + (j - 1)*eixo_x;
    kp  = (i + 1) + (j - 1)*eixo_x;
    km  = (i - 1) + (j - 1)*eixo_x;
    kpp = i + ((j + 1) - 1)*eixo_x;
    kmm = i + ((j - 1) - 1)*eixo_x;

    ## sem condição de contorno
    if (i >= 2 && j >= 2 && i < eixo_x && j< eixo_y)
      
      A(k,k)   = -(dy(j)/dxhat(i) + dx(i)/dyhat(j) + dx(i)/dyhat(j-1) + dy(j)/dxhat(i-1));
      A(k,km)  = dy(j)/dxhat(i-1);
      A(k,kp)  = dy(j)/dxhat(i);
      A(k,kmm) = dx(i)/dyhat(j-1);
      A(k,kpp) = dx(i)/dyhat(j);

      b(k) = 0;

    elseif (j == 1 && i == 1)
      A(k,k)   = -(dx(i)/dyhat(j) + dy(j)/dxhat(i-1) + 2*dy(j)/dx(i) + 2*dx(i)/dy(j));
      A(k,kpp) = dx(i)/dyhat(j);
      A(k,kp)  = dy(j)/dxhat(i);
      b(k) = -fluxo(i,j) * sqrDifY(j+1,j)/dx(i);
     elseif (j == 1 && i == eixo_x)
      A(k,k)   = -(dy(j)/dx(i-1) + dx(i)/dyhat(j) + 2*dx(i)/dy(j) + 2*dy(j)/dx(i)) ;
      A(k,km)  = dy(j)/dxhat(i-1);
      A(k,kpp) = dx(i)/dyhat(j);
      b(k) = 0;
     elseif (i == eixo_x && j == eixo_y)
      A(k,k)   = -(dx(i)/dyhat(j-1) + dy(j)/dxhat(i-1) + 2*dy(j)/dx(i) + 2*dx(i)/dy(j));
      A(k,km)  = dy(j)/dxhat(i-1);
      A(k,kmm) = dx(i)/dyhat(j-1);
      b(k) = -fluxo(eixo_x, eixo_y) * (2 * dx(i)/dy(j) + 2 * dy(j)/dx(i));
      ## b(k) = fluxo(1,19) * (2 * dx(i)/dy(j) + 6 * dy(j)/dx(i) - sqrDifY(j+1, j)/dx(i));
     elseif (i == 1 && j == eixo_y)
      A(k,k)   = -(dy(j)/dxhat(i) + dx(i)/dyhat(j-1) + 2*dx(i)/dy(j) + 2*dy(j)/dx(i));
      A(k,kp)  = dy(j)/dxhat(i);
      A(k,kmm) = dx(i)/dyhat(j-1);
      b(k) = -fluxo(1,19) * (2*dy(j)/dx(i) + 2*dx(i)/dy(j));

      ## borda sul
    elseif (j == 1)

      A(k,k)   = -(dy(j)/dxhat(i) + dx(i)/dyhat(j) + dy(j)/dxhat(i-1) + 2*dx(i)/dy(j));
      A(k,km)  = dy(j)/dxhat(i-1);
      A(k,kp)  = dy(j)/dxhat(i);
      A(k,kpp) = dx(i)/dyhat(j);

      b(k) = 0;

      ## borda leste
    elseif (i == eixo_x)
    	A(k,k)   = -(dx(i)/dyhat(j-1) + dy(j)/dxhat(i-1) + dx(i)/dyhat(j) + 2*dy(j)/dxhat(i));
    	A(k,km)  = dy(j)/dxhat(i-1);
    	A(k,kmm) = dx(i)/dyhat(j-1);
    	A(k,kpp) = dx(i)/dyhat(j);
      
      if fluxo(i,j)
    	b(k) = fluxo(i,j) * (-sqrDifY(j+1, j) + 6*dy(i))/dx(j);
      else
    	b(k) = 0;
      end

      ## borda norte
    elseif (j == eixo_y)
      A(k,k)   = -(dy(j)/dxhat(i) + dx(i)/dyhat(j-1) + dy(j)/dxhat(i-1) + 2*dx(i)/dy(j));
      A(k,km)  = dy(j)/dxhat(i-1);
      A(k,kp)  = dy(j)/dxhat(i);
      A(k,kmm) = dx(i)/dyhat(j-1);

      b(k) = -fluxo(1,19) * 2 * dx(i)/dy(j);
      
      ## borda oeste
    elseif (i == 1)
      A(k,k)   = -(dy(j)/dxhat(i) + dx(i)/dyhat(j) +  dy(j)/dxhat(i-1) + 2*dy(j)/dx(i));
      A(k,kp)  = dy(j)/dxhat(i);
      A(k,kmm) = dx(i)/dyhat(j-1);
      A(k,kpp) = dx(i)/dyhat(j);

      if fluxo(i,j)
    	b(k) = -fluxo(i,j) * sqrDifY(j+1,j)/dx(i);
      else
    	b(k) = -fluxo(i,19) * 2 *dy(j)/dx(i);
      end
    end
    
  end
end

## A(10,:) = zeros(1,size(A)(1));
## A(10,10) = 1;

PSI = reshape (A\b', eixo_x, eixo_y)';

## contour(PSI,50);





DxPsi = zeros(eixo_x-1,eixo_y-1);
DyPsi = zeros(eixo_x-1,eixo_y-1);

for i = 2:(eixo_x-1)
  for j = 2:(eixo_y-1)
      
      DxPsi(i,j) = Dcx(i, j, dx(i), PSI);
      DyPsi(i,j) = Dcy(i, j, dy(j), PSI);
    
  end
end



## Calcula o campo vetorial de Psi por meio de Phi

A = sparse(zeros(eixo_x*eixo_y,eixo_x*eixo_y));

for j=1:eixo_y
  for i=1:eixo_x
    k = i + (j - 1)*eixo_x;
    kp = (i + 1) + (j - 1)*eixo_x;
    km = (i - 1) + (j - 1)*eixo_x;
    kpp = i + ((j + 1) - 1)*eixo_x;
    kmm = i + ((j - 1) - 1)*eixo_x;

    ## 
    ## 9 casos (interior, 4 bordas e 4 cantos
    ## Precisa definir A(k,k), A(k,kp,) A(k,km), A(k,kpp), A(k,kmm), b(k)
    ##
    
    ## sem condição de contorno
    if (i >= 2 && j >= 2 && i < eixo_x && j< eixo_y)
      
      A(k,k)   = -(dy(j)/dxhat(i) + dx(i)/dyhat(j) + dx(i)/dyhat(j-1) + dy(j)/dxhat(i-1));
      A(k,km)  = dy(j)/dxhat(i-1);
      A(k,kp)  = dy(j)/dxhat(i);
      A(k,kmm) = dx(i)/dyhat(j-1);
      A(k,kpp) = dx(i)/dyhat(j);

      b(k) = 0;

      ## canto inferior esquerdo
      ## adiciona integral oeste (-5dy) em b
      ## e leste em Akk e adiciona termos Akm Akp 
    elseif (j == 1 && i == 1)
      A(k,k)   = -(dx(i)/dyhat(j) + dy(j)/dxhat(i-1));
      A(k,kpp) = dx(i)/dyhat(j);
      A(k,kp)  = dy(j)/dxhat(i);

      b(k) = -fluxo(i,j)*dy(j);

      ## canto inferior direito
      ## integrais leste e sul se anulam, anulando kmm e kpp
    elseif (j == 1 && i == eixo_x)	
      ## fprintf("inf dir \n")
      
      A(k,k)   = -(dy(j)/dx(i-1) + dx(i)/dyhat(j));
      A(k,km)  = dy(j)/dxhat(i-1);
      A(k,kpp) = dx(i)/dyhat(j);

      b(k) = 0;

      ## canto superior direito
      ## integral norte se anula, leste adiciona termo de fluxo a b(k)
    elseif (i == eixo_x && j == eixo_y)
      ## fprintf("sup dir \n")
      
      A(k,k)   = -(dx(i)/dyhat(j-1) + dy(j)/dxhat(i-1));
      A(k,km)  = dy(j)/dxhat(i-1);
      ## A(k,kp)  = 0;
      A(k,kmm) = dx(i)/dyhat(j-1);
      ## A(k,kpp) = 0;
      
      b(k) = fluxo(i,j)*dy(j);
      
    elseif (i == 1 && j == eixo_y)

      A(k,k)   = -(dy(j)/dxhat(i) + dx(i)/dyhat(j-1));
      A(k,km)  = 0;
      A(k,kp)  = dy(j)/dxhat(i);
      A(k,kmm) = dx(i)/dyhat(j-1);
      ## A(k,kpp) = 0;

      b(k) = 0;

      ## borda inferior
      ## integral sul se anula
    elseif (j == 1)
      
      A(k,k)   = -(dy(j)/dxhat(i) + dx(i)/dyhat(j) + dy(j)/dxhat(i-1));
      A(k,km)  = dy(j)/dxhat(i-1);
      A(k,kp)  = dy(j)/dxhat(i);
      A(k,kpp) = dx(i)/dyhat(j);

      b(k) = 0;

      ## borda direita
      ## checa se há fluxo de saída
    elseif (i == eixo_x)
      
      if fluxo(i,j)
    	A(k,k)   = -(dx(i)/dyhat(j-1) + dy(j)/dxhat(i-1) + dx(i)/dyhat(j));
    	A(k,km)  = dy(j)/dxhat(i-1);
     	A(k,kmm) = dx(i)/dyhat(j-1);
    	A(k,kpp) = dx(i)/dyhat(j);
      
    	b(k) = fluxo(i,j)*dy(j);

      else
    	A(k,k)   = -(dx(i)/dyhat(j-1) + dy(j)/dxhat(i-1) + dx(i)/dyhat(j));
    	A(k,km)  = dy(j)/dxhat(i-1);
    	A(k,kmm) = dx(i)/dyhat(j-1);
    	A(k,kpp) = dx(i)/dyhat(j);
      
    	b(k) = 0;
      end

      ## borda norte
    elseif (j == eixo_y)
      A(k,k)   = -(dy(j)/dxhat(i) + dx(i)/dyhat(j-1) + dy(j)/dxhat(i-1));
      A(k,km)  = dy(j)/dxhat(i-1);
      A(k,kp)  = dy(j)/dxhat(i);
      A(k,kmm) = dx(i)/dyhat(j-1);

      b(k) = 0;
      
    	## borda esquerda
    	## checa se há fluxo de entrada
    elseif (i == 1)
      
      if fluxo(i,j)
    	A(k,k)   = -(dy(j)/dxhat(i) + dx(i)/dyhat(j) +  dy(j)/dxhat(i-1));
    	A(k,km)  = 0;
    	A(k,kp)  = dy(j)/dxhat(i);
    	A(k,kmm) = dx(i)/dyhat(j-1);
    	A(k,kpp) = dx(i)/dyhat(j);

    	b(k) = -fluxo(i,j)*dy(j);
      else
    	A(k,k)   = -(dy(j)/dxhat(i) + dx(i)/dyhat(j) +  dy(j)/dxhat(i-1));
    	A(k,km)  = 0;
    	A(k,kp)  = dy(j)/dxhat(i);
    	A(k,kmm) = dx(i)/dyhat(j-1);
    	A(k,kpp) = dx(i)/dyhat(j);

    	b(k) = 0;
      end
    end
     
  end
end

PHI = reshape (A\b', eixo_x, eixo_y)';

PSIX = zeros(eixo_x-1, eixo_y-1);
PSIY = zeros(eixo_x-1, eixo_y-1);

for j=2:(eixo_y-1)
  for i=2:(eixo_x-1)
    
    PSIX(i,j) = Dcx(i,j,dx(1),PHI);
    PSIY(i,j) = Dcy(i,j,dy(1),PHI);

  end
end

dx(1)*dy(1)*norm(PSIX - DxPsi)
